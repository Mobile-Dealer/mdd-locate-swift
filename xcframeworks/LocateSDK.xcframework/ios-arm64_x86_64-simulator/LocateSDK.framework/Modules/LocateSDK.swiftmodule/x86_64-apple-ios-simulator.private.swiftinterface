// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LocateSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
@_exported import LocateSDK
import OSLog
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum MddLocateError : Swift.Error {
  case trackingTagMismatch
  public static func == (a: LocateSDK.MddLocateError, b: LocateSDK.MddLocateError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MDDApiInteraction : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MddDetectorProximity {
  case unknown
  case near
  case immediate
  case far
  public static func == (a: LocateSDK.MddDetectorProximity, b: LocateSDK.MddDetectorProximity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MddLocateSDK {
  public static var apikey: Swift.String? {
    get
  }
  public static let rssiNotification: Foundation.Notification.Name
  public static let previousInteractionsNotification: Foundation.Notification.Name
  public static func configure(apikey: Swift.String)
  public static func startTrackingTags(username: Swift.String)
  public static func stopTrackingTags()
  public static func startDetecting(trackingTagId: Swift.String)
  public static func getDetectedProximity(trackingTagId: Swift.String) throws -> LocateSDK.MddDetectorProximity
  public static func stopDetecting(trackingTagId: Swift.String)
  public static func pair(orgId: Swift.String, assetId: Swift.String, trackingTagId: Swift.String)
  public static func loadAssetData(orgId: Swift.String, assetId: Swift.String)
  public static func loadAssetTrackingTagData(orgId: Swift.String, assetId: Swift.String, trackingTagId: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class MddDetector : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc override dynamic public init()
  public func startUpdatingRssi(trackingTagId: Swift.String)
  public func stopUpdatingRssi(trackingTagId: Swift.String)
  @objc deinit
}
extension LocateSDK.MddDetector {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didRangeBeacons beacons: [CoreLocation.CLBeacon], in region: CoreLocation.CLBeaconRegion)
}
@objc @_hasMissingDesignatedInitializers public class MddTagTracker : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public func startTracking(username: Swift.String)
  public func stopTracking()
  public func getPreviousInteractions() -> [LocateSDK.MDDApiInteraction]
  @objc deinit
}
extension LocateSDK.MddTagTracker {
  @objc dynamic public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didRange beacons: [CoreLocation.CLBeacon], satisfying beaconConstraint: CoreLocation.CLBeaconIdentityConstraint)
}
extension LocateSDK.MddLocateError : Swift.Equatable {}
extension LocateSDK.MddLocateError : Swift.Hashable {}
extension LocateSDK.MddDetectorProximity : Swift.Equatable {}
extension LocateSDK.MddDetectorProximity : Swift.Hashable {}
