// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LocateSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
@_exported import LocateSDK
import Swift
import _Concurrency
import _StringProcessing
public struct MddLocateSDK {
  public static var apikey: Swift.String? {
    get
  }
  public static let rssiNotification: Foundation.Notification.Name
  public static func configure(apikey: Swift.String)
  public static func startTrackingTags(username: Swift.String)
  public static func stopTrackingTags()
  public static func startDetecting(trackingTagId: Swift.String)
  public static func getDetectedRssi(trackingTagId: Swift.String) throws -> Swift.Int
  public static func stopDetecting(trackingTagId: Swift.String)
  public static func pair(orgId: Swift.String, assetId: Swift.String, trackingTagId: Swift.String)
  public static func loadAssetData(orgId: Swift.String, assetId: Swift.String)
  public static func loadAssetTrackingTagData(orgId: Swift.String, assetId: Swift.String, trackingTagId: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class MddDetector : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc override dynamic public init()
  public func startUpdatingRssi(trackingTagId: Swift.String)
  public func stopUpdatingRssi(trackingTagId: Swift.String)
  @objc deinit
}
extension LocateSDK.MddDetector {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didRangeBeacons beacons: [CoreLocation.CLBeacon], in region: CoreLocation.CLBeaconRegion)
}
@objc @_hasMissingDesignatedInitializers public class MddTagTracker : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public func startTracking(username: Swift.String)
  public func stopTracking()
  @objc deinit
}
extension LocateSDK.MddTagTracker {
  @objc dynamic public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didRange beacons: [CoreLocation.CLBeacon], satisfying beaconConstraint: CoreLocation.CLBeaconIdentityConstraint)
}
